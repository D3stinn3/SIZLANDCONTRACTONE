{
    "name": "SizlandVestingContract",
    "structs": {
        "UserAllocation": [
            {
                "name": "total_allocation",
                "type": "uint64"
            },
            {
                "name": "claimed_amount",
                "type": "uint64"
            },
            {
                "name": "start_time",
                "type": "uint64"
            },
            {
                "name": "cliff_time",
                "type": "uint64"
            },
            {
                "name": "vesting_period",
                "type": "uint64"
            },
            {
                "name": "last_claim_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_allocation",
            "args": [
                {
                    "type": "account",
                    "name": "beneficiary"
                },
                {
                    "type": "uint64",
                    "name": "total_allocation"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "cliff_time"
                },
                {
                    "type": "uint64",
                    "name": "vesting_period"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "allocations": {
                    "keyType": "address",
                    "valueType": "UserAllocation",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        154
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        222
                    ],
                    "errorMessage": "Cliff not reached"
                },
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        215
                    ],
                    "errorMessage": "No allocation found"
                },
                {
                    "pc": [
                        66,
                        78,
                        108
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        142
                    ],
                    "errorMessage": "Only creator can opt in to ASA"
                },
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "Only the creator can call this method"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        69,
                        81,
                        111
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        217
                    ],
                    "errorMessage": "check self.allocations entry exists"
                },
                {
                    "pc": [
                        146
                    ],
                    "errorMessage": "check self.asa exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmAgNhc2EIAAAAAAAAAAAxGEAAAygiZzEbQQBaggMEKCayAgRuWbetBPFXdyY2GgCOAwAsAA4AAiJDMRkURDEYRIgAhSNDMRkURDEYRDYaARfAHDYaAjYaAzYaBDYaBYgASiNDMRkURDEYRDYaARfAMIgADSNDMRlA/70xGBREI0OKAQAxADIJEkQiKGVEgaSQwekKEkQoi/9nsTIKi/+yEbIUgQSyECKyAbOJigUAMQAyCRJEi/wpUIv9UIv+UIv/UClQi/tMv4kyBxYxAEm9RQFEvkRXGAinRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}