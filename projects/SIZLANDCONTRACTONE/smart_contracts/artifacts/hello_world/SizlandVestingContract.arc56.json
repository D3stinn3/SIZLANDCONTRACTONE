{
    "name": "SizlandVestingContract",
    "structs": {
        "UserAllocation": [
            {
                "name": "total_allocation",
                "type": "uint64"
            },
            {
                "name": "claimed_amount",
                "type": "uint64"
            },
            {
                "name": "start_time",
                "type": "uint64"
            },
            {
                "name": "cliff_time",
                "type": "uint64"
            },
            {
                "name": "vesting_period",
                "type": "uint64"
            },
            {
                "name": "last_claim_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_allocation",
            "args": [
                {
                    "type": "account",
                    "name": "beneficiary"
                },
                {
                    "type": "uint64",
                    "name": "total_allocation"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "cliff_time"
                },
                {
                    "type": "uint64",
                    "name": "vesting_period"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "allocations": {
                    "keyType": "address",
                    "valueType": "UserAllocation",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        275
                    ],
                    "errorMessage": "Cliff not reached"
                },
                {
                    "pc": [
                        220
                    ],
                    "errorMessage": "No allocation found"
                },
                {
                    "pc": [
                        298
                    ],
                    "errorMessage": "Nothing to claim"
                },
                {
                    "pc": [
                        67,
                        79,
                        109
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        143
                    ],
                    "errorMessage": "Only creator can opt in to ASA"
                },
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "Only the creator can call this method"
                },
                {
                    "pc": [
                        283
                    ],
                    "errorMessage": "Wait before claiming again"
                },
                {
                    "pc": [
                        132
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        70,
                        82,
                        112
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        222
                    ],
                    "errorMessage": "check self.allocations entry exists"
                },
                {
                    "pc": [
                        147,
                        303
                    ],
                    "errorMessage": "check self.asa exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgIDYXNhCAAAAAAAAAAAMRhAAAMoImcxG0EAWoIDBCgmsgIEblm3rQTxV3cmNhoAjgMALAAOAAIiQzEZFEQxGESIAIQjQzEZFEQxGEQ2GgEXwBw2GgI2GgM2GgQ2GgWIAEkjQzEZFEQxGEQ2GgEXwDCIAA0jQzEZQP+9MRgURCNDigEAMQAyCRJEIihlRIGkkMHpChJEKIv/Z7EyCov/shGyFCSyECKyAbOJigUAMQAyCRJEi/wpUIv9UIv+UIv/UClQi/tMv4mKAAAxADIHSTEASb1FAUS+REmBKFtLAYEYW0lOAk4ESwKBEFtJTgROBUsCgSBbSU4DTgZLA4EIW04GTwMiW04FSwRPAg9ESwNMCYEKD0QID0EAR4sGiwVJTgIJSUSxIihlRLIRSbISiwBJTgOyFCSyECKyAbOLBhZOAggWiwMWiwIWiwQWiwEWTwVPBVBPBFBPA1BPAlBMUL+JiwGLAwmLBguLBApC/60=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}