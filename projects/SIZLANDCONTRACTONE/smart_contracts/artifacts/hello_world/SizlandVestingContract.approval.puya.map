{
  "version": 3,
  "sources": [
    "../../hello_world/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAoBQ;AAAW;AAAX;AAPR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA8CK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;AAVL;;AAAA;;;;;;;;;AAUA;;;AAGe;;AAAc;;AAAd;AAAP;AAEO;AAAA;AAAA;AAAA;AAAe;;;;;;AAAf;AAAP;AAEA;AAAA;;AAAA;AAGA;AACmB;;;;;;;;AADnB;;;;AAAA;;;AAAA;;AAKR;;;AAUY;;AAAc;;AAAd;AADJ;AAGgC;;AAEb;AAFa;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAMZ;AANY;AAAhC;;AAAA;AAAA;;AAW2B;;AAAZ;AACN;;AAGF;AAAA;AAAA;;AAAP;AACa;AAAA;AAGU;;;AAAhB;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.hello_world.contract.SizlandVestingContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"asa\" 0x0000000000000000"
    },
    "20": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "22": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "25": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "26": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "\"asa\"",
        "0"
      ]
    },
    "27": {
      "op": "app_global_put",
      "stack_out": []
    },
    "28": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "30": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "33": {
      "op": "pushbytess 0x2826b202 0x6e59b7ad 0xf1577726 // method \"opt_into_asset(asset)void\", method \"set_allocation(account,uint64,uint64,uint64,uint64)void\", method \"claim()void\"",
      "defined_out": [
        "Method(claim()void)",
        "Method(opt_into_asset(asset)void)",
        "Method(set_allocation(account,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(opt_into_asset(asset)void)",
        "Method(set_allocation(account,uint64,uint64,uint64,uint64)void)",
        "Method(claim()void)"
      ]
    },
    "50": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claim()void)",
        "Method(opt_into_asset(asset)void)",
        "Method(set_allocation(account,uint64,uint64,uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(opt_into_asset(asset)void)",
        "Method(set_allocation(account,uint64,uint64,uint64,uint64)void)",
        "Method(claim()void)",
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "match main_opt_into_asset_route@5 main_set_allocation_route@6 main_claim_route@7",
      "stack_out": []
    },
    "61": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "block": "main_claim_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "65": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "66": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "67": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "69": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "70": {
      "callsub": "smart_contracts.hello_world.contract.SizlandVestingContract.claim",
      "op": "callsub claim"
    },
    "73": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "74": {
      "op": "return",
      "stack_out": []
    },
    "75": {
      "block": "main_set_allocation_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "78": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "81": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "82": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "85": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "86": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "88": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "91": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "97": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "100": {
      "callsub": "smart_contracts.hello_world.contract.SizlandVestingContract.set_allocation",
      "op": "callsub set_allocation",
      "stack_out": []
    },
    "103": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    },
    "105": {
      "block": "main_opt_into_asset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "107": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "108": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "115": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "116": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "118": {
      "callsub": "smart_contracts.hello_world.contract.SizlandVestingContract.opt_into_asset",
      "op": "callsub opt_into_asset",
      "stack_out": []
    },
    "121": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "125": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "131": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "133": {
      "op": "return",
      "stack_out": []
    },
    "134": {
      "subroutine": "smart_contracts.hello_world.contract.SizlandVestingContract.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "137": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "141": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "142": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "143": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "144": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "145": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "146": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "147": {
      "op": "pushint 2905622564 // 2905622564",
      "defined_out": [
        "2905622564",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2905622564"
      ]
    },
    "153": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "155": {
      "op": "bytec_0 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "156": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "159": {
      "op": "itxn_begin"
    },
    "160": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "162": {
      "op": "frame_dig -1",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "164": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "166": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "168": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "170": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "173": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "175": {
      "op": "itxn_submit"
    },
    "176": {
      "retsub": true,
      "op": "retsub"
    },
    "177": {
      "subroutine": "smart_contracts.hello_world.contract.SizlandVestingContract.set_allocation",
      "params": {
        "beneficiary#0": "bytes",
        "total_allocation#0": "bytes",
        "start_time#0": "bytes",
        "cliff_time#0": "bytes",
        "vesting_period#0": "bytes"
      },
      "block": "set_allocation",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "180": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "185": {
      "error": "Only the creator can call this method",
      "op": "assert // Only the creator can call this method",
      "stack_out": []
    },
    "186": {
      "op": "frame_dig -4",
      "defined_out": [
        "total_allocation#0 (copy)"
      ],
      "stack_out": [
        "total_allocation#0 (copy)"
      ]
    },
    "188": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "total_allocation#0 (copy)"
      ],
      "stack_out": [
        "total_allocation#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "190": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "start_time#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "start_time#0 (copy)"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "193": {
      "op": "frame_dig -2",
      "defined_out": [
        "cliff_time#0 (copy)",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "cliff_time#0 (copy)"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "196": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "vesting_period#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "vesting_period#0 (copy)"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "199": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x0000000000000000"
      ]
    },
    "200": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "201": {
      "op": "frame_dig -5",
      "defined_out": [
        "beneficiary#0 (copy)",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "beneficiary#0 (copy)"
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "beneficiary#0 (copy)",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "204": {
      "op": "box_put",
      "stack_out": []
    },
    "205": {
      "retsub": true,
      "op": "retsub"
    },
    "206": {
      "subroutine": "smart_contracts.hello_world.contract.SizlandVestingContract.claim",
      "params": {},
      "block": "claim",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "208": {
      "op": "itob",
      "defined_out": [
        "current_time#0"
      ],
      "stack_out": [
        "current_time#0"
      ]
    },
    "209": {
      "op": "txn Sender",
      "defined_out": [
        "current_time#0",
        "sender#0"
      ],
      "stack_out": [
        "current_time#0",
        "sender#0"
      ]
    },
    "211": {
      "op": "dup",
      "defined_out": [
        "current_time#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "current_time#0",
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "212": {
      "op": "box_len",
      "defined_out": [
        "current_time#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "current_time#0",
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "213": {
      "op": "bury 1",
      "stack_out": [
        "current_time#0",
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "215": {
      "error": "No allocation found",
      "op": "assert // No allocation found",
      "stack_out": [
        "current_time#0",
        "sender#0"
      ]
    },
    "216": {
      "op": "box_get",
      "defined_out": [
        "allocation#0",
        "current_time#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_time#0",
        "allocation#0",
        "maybe_exists%1#0"
      ]
    },
    "217": {
      "error": "check self.allocations entry exists",
      "op": "assert // check self.allocations entry exists",
      "stack_out": [
        "current_time#0",
        "allocation#0"
      ]
    },
    "218": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "current_time#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "current_time#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "221": {
      "op": "b>=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "222": {
      "error": "Cliff not reached",
      "op": "assert // Cliff not reached",
      "stack_out": []
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    }
  }
}