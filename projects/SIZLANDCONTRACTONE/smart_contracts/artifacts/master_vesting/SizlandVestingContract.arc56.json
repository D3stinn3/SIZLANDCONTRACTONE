{
    "name": "SizlandVestingContract",
    "structs": {
        "UserAllocation": [
            {
                "name": "total_allocation",
                "type": "uint64"
            },
            {
                "name": "claimed_amount",
                "type": "uint64"
            },
            {
                "name": "start_time",
                "type": "uint64"
            },
            {
                "name": "cliff_time",
                "type": "uint64"
            },
            {
                "name": "vesting_period",
                "type": "uint64"
            },
            {
                "name": "last_claim_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "account",
                    "name": "master"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_allocation",
            "args": [
                {
                    "type": "account",
                    "name": "beneficiary"
                },
                {
                    "type": "uint64",
                    "name": "total_allocation"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "cliff_time"
                },
                {
                    "type": "uint64",
                    "name": "vesting_period"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                },
                "master_contract": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWFzdGVyX2NvbnRyYWN0"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "allocations": {
                    "keyType": "address",
                    "valueType": "UserAllocation",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        233
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        357
                    ],
                    "errorMessage": "Cliff not reached"
                },
                {
                    "pc": [
                        302
                    ],
                    "errorMessage": "No allocation found"
                },
                {
                    "pc": [
                        380
                    ],
                    "errorMessage": "Nothing to claim"
                },
                {
                    "pc": [
                        94,
                        106,
                        136,
                        154
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        194
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        267
                    ],
                    "errorMessage": "Only the creator can call this method"
                },
                {
                    "pc": [
                        227
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        365
                    ],
                    "errorMessage": "Wait before claiming again"
                },
                {
                    "pc": [
                        183
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        97,
                        109,
                        139,
                        157
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        304
                    ],
                    "errorMessage": "check self.allocations entry exists"
                },
                {
                    "pc": [
                        231,
                        385
                    ],
                    "errorMessage": "check self.asa exists"
                },
                {
                    "pc": [
                        221
                    ],
                    "errorMessage": "check self.master_contract exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgMDYXNhD21hc3Rlcl9jb250cmFjdAgAAAAAAAAAADEYQAAHKCJnKTIDZzEbQQB5ggQEmgsdTwQoJrICBG5Zt60E8Vd3JjYaAI4EAD4ALAAOAAIiQzEZFEQxGESIALsjQzEZFEQxGEQ2GgEXwBw2GgI2GgM2GgQ2GgWIAIAjQzEZFEQxGEQ2GgEXwDCIADgjQzEZFEQxGEQ2GgEXwBw2GgIXwDCIAA0jQzEZQP+lMRgURCNDigIAMQAyCRJEKYv+Z4v/iAABiYoBADEAMgkSQAAKMQAiKWVEEkEAHSNEIihlRBREKIv/Z7EyCov/shGyFCSyECKyAbOJIkL/4IoFADEAMgkSRIv8KlCL/VCL/lCL/1AqUIv7TL+JigAAMQAyB0kxAEm9RQFEvkRJgShbSwGBGFtJTgJOBEsCgRBbSU4ETgVLAoEgW0lOA04GSwOBCFtOBk8DIltOBUsETwIPREsDTAmBCg9ECA9BAEeLBosFSU4CCUlEsSIoZUSyEUmyEosASU4DshQkshAisgGziwYWTgIIFosDFosCFosEFosBFk8FTwVQTwRQTwNQTwJQTFC/iYsBiwMJiwYLiwQKQv+t",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}